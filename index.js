"use strict";
var Promise = require("bluebird");
var couchObj = require("../couchobject");
var rpj = require("request-promise-json");
function find(_id, couchdb) {
    return new Promise(function (resolve, reject) {
        rpj.get(couchdb + "/" + _id).then(function (obj) {
            resolve(obj);
        }).catch(function (err) {
            reject(err);
        });
    });
}
function update(obj, couchdb) {
    return new Promise(function (resolve, reject) {
        find(obj._id, couchdb).then(function (o) {
            obj._rev = o._rev;
            create(obj, couchdb).then(function () {
                resolve(true);
            }).catch(function (err) {
                reject(err);
            });
        });
    });
}
function create(obj, couchdb) {
    return new Promise(function (resolve, reject) {
        rpj.put(couchdb + "/" + obj._id, obj).then(function () {
            resolve(obj._id);
        }).catch(function (err) {
            reject(err);
        });
    });
}
var CouchManager = (function () {
    function CouchManager(conf) {
        this.couchdb = conf.couch;
        if (conf.class)
            this.class = conf.class;
        if (conf.serial)
            this.class = conf.serial;
        if (conf.apiVersion)
            this.apiVersion = conf.apiVersion;
    }
    CouchManager.prototype.create = function (obj) {
        var that = this;
        if (!obj.apiVersion && that.apiVersion)
            obj.apiVersion = that.apiVersion;
        return create(obj, this.couchdb);
    };
    CouchManager.prototype.update = function (obj) {
        var that = this;
        if (!obj.apiVersion && that.apiVersion)
            obj.apiVersion = that.apiVersion;
        return update(obj, this.couchdb);
    };
    CouchManager.prototype.find = function (_id) {
        return find(_id, this.couchdb);
    };
    CouchManager.prototype.gen = function (options) {
        var opt = {};
        var that = this;
        if (options) {
            if (options.class)
                opt.class = options.class;
            if (options.serial)
                opt.serial = options.serial;
            if (options.apiVersion)
                opt.apiVersion = options.apiVersion;
        }
        if (!opt.class && that.class)
            opt.class = that.class;
        if (!opt.serial && that.serial)
            opt.serial = that.serial;
        if (!opt.apiVersion && that.apiVersion)
            opt.apiVersion = that.apiVersion;
        return new couchObj(opt);
    };
    CouchManager.prototype.take = function (data, relation) {
        if (!data) {
            data = {};
        }
        var that = this;
        var startId;
        var stopId;
        if (data.startId) {
            startId = data.startId;
            if (data.stopId) {
                stopId = data.stopId;
            }
            else {
                stopId = false;
            }
        }
        else {
            if (that.class) {
                if (that.serial) {
                    startId = that.class + "_" + that.serial + "_";
                }
                else {
                    startId = that.class + "_00000_";
                }
            }
            else {
                if (that.serial) {
                    startId = "data_" + that.serial + "_";
                }
                else {
                    startId = "data_00000_";
                }
            }
            if (data.stopId) {
                stopId = data.stopId;
            }
            else {
                if (that.class) {
                    if (that.serial) {
                        stopId = that.class + "_" + that.serial + "_";
                    }
                    else {
                        stopId = that.class + "_00000_";
                    }
                }
                else {
                    if (that.serial) {
                        stopId = "data_" + that.serial + "_";
                    }
                    else {
                        stopId = "data_00000_99999999999";
                    }
                }
            }
        }
        var q;
        if (stopId) {
            q = that.couchdb + '/_all_docs?startkey="' + startId + '"&endkey=' + stopId;
        }
        else {
            q = that.couchdb + '/_all_docs?startkey="' + startId + '"';
        }
        console.log(q);
        return new Promise(function (resolve, reject) {
            rpj.get(q).then(function (objects) {
                console.log(objects);
                resolve(objects.rows);
                if (relation) {
                    resolve(that.relation(objects, relation));
                }
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    CouchManager.prototype.relation = function (obj, relations) {
    };
    return CouchManager;
}());
module.exports = CouchManager;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
